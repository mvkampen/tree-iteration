import { type Node } from './node';
export type Context<T> = {
    readonly focus: T;
    readonly left: Array<Node<T>>;
    readonly right: Array<Node<T>>;
};
export type Zipper<T> = {
    readonly node: Node<T>;
    readonly path: Array<Context<T>>;
};
export declare function zipper<T>(node: Node<T>): Zipper<T>;
export declare function update<T>(fn: (value: T) => T, { node, path }: Zipper<T>): Zipper<T>;
export declare function replace<T>(value: T, zipper: Zipper<T>): Zipper<T>;
export declare function tree<T>({ node }: Zipper<T>): Node<T>;
export declare function value<T>({ node }: Zipper<T>): T;
export declare function goUp<T>({ node, path }: Zipper<T>): Zipper<T> | undefined;
export declare function goLeft<T>({ node, path }: Zipper<T>): Zipper<T> | undefined;
export declare function goRight<T>({ node, path }: Zipper<T>): Zipper<T> | undefined;
export declare function goToChild<T>(n: number, { node, path }: Zipper<T>): Zipper<T> | undefined;
export declare function goToFirstChild<T>(zipper: Zipper<T>): Zipper<T> | undefined;
export declare function goToLastChild<T>({ node, path }: Zipper<T>): Zipper<T> | undefined;
export declare function goToLastDecendant<T>(zipper: Zipper<T>): Zipper<T>;
export declare function goNext<T>(zipper: Zipper<T>): Zipper<T> | undefined;
export declare function goPrevious<T>(zipper: Zipper<T>): Zipper<T> | undefined;
export declare function root<T>(zipper: Zipper<T>): Zipper<T> | undefined;
export declare function find<T>(predicate: (p: T) => boolean, move: (zipper: Zipper<T>) => Zipper<T> | undefined, zipper: Zipper<T>): Zipper<T> | undefined;
export declare function findNext<T>(predicate: (p: T) => boolean, zipper: Zipper<T>): Zipper<T> | undefined;
export declare function findPrevious<T>(predicate: (p: T) => boolean, zipper: Zipper<T>): Zipper<T> | undefined;
export declare function prepend<T>(prepend: Node<T>, { node, path }: Zipper<T>): Zipper<T>;
export declare function append<T>(append: Node<T>, { node, path }: Zipper<T>): Zipper<T>;
export declare function remove<T>({ node, path }: Zipper<T>): Zipper<T> | undefined;
