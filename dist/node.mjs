function a(e){return{value:e,children:[]}}function c(e,r){return{value:e,children:r}}function N({children:e}){return e.length==0}function p({children:e}){return e.length>0}function f(e,{value:r,children:o}){return{value:r,children:[...o,e]}}function U(e,{value:r,children:o}){return{value:r,children:[e,...o]}}function h(e,{value:r,children:o}){return{value:e(r),children:o}}function x(e,{children:r}){return{value:e,children:r}}function s(e,r,o){return i((n,t)=>[n,...t],[],o).reduce((n,t)=>e(t,n),r)}function i(e,r,o){return l(e,r,[o],[])}function l(e,r,o,T){let[n,...t]=o;if(n){let{value:d,children:u}=n;return u.length>0?l(e,e(d,r),u,[t,...T]):l(e,e(d,r),t,T)}else if(T.length>0){let[d,...u]=T;return l(e,r,d,u)}else return r}function y(e){return i((r,o)=>o+1,0,e)}export{f as appendChild,y as count,l as foldStep,i as foldl,s as foldr,p as hasChildren,N as isLeaf,h as mapValue,c as node,U as prependChild,x as replaceValue,a as singleton};
